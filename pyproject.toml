[project]
authors = [{ email = "contact@linkup.so", name = "LINKUP TECHNOLOGIES" }]
description = "A Python Client SDK for the Linkup API"
keywords = ["api", "client", "linkup", "sdk", "search"]
license = "MIT"
name = "linkup-sdk"
readme = "README.md"
requires-python = ">=3.9"
version = "0.8.0"

classifiers = [
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = ["httpx>=0.23.0", "pydantic>=2.0.0"]

[project.optional-dependencies]
build = ["uv>=0.8.0,<0.9.0"] # For python-semantic-release build command, used in GitHub actions

[project.urls]
Documentation = "https://github.com/LinkupPlatform/linkup-python-sdk#readme"
Homepage = "https://github.com/LinkupPlatform/linkup-python-sdk"
Source = "https://github.com/LinkupPlatform/linkup-python-sdk"
Tracker = "https://github.com/LinkupPlatform/linkup-python-sdk/issues"

[dependency-groups]
dev = [
  "mypy>=1.16.1",
  "pre-commit>=4.2.0",
  "pytest-asyncio>=1.0.0",
  "pytest-cov>=6.2.1",
  "pytest-mock>=3.14.1",
  "pytest>=8.4.1",
  "python-dotenv>=1.1.1",
  "rich>=14.1.0",
]

[tool.mypy]
strict = true
warn_unreachable = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
exclude_also = ["raise TypeError", "raise ValueError"]
show_missing = true
skip_covered = true

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
extend-ignore = ["D107"]
pydocstyle = { convention = "google" }
# TODO: enable commented out rules and fix errors
select = [
  # "A", # flake8-builtins: avoid shadowing built-in names
  # "ANN", # flake8-annotations: check for missing type annotations
  "ASYNC", # flake8-async: enforce best practices for async code
  "B", # flake8-bugbear: find likely bugs and design problems in your program
  "C4", # flake8-comprehensions: enforce best practices for list/set/dict comprehensions
  "D", # pydocstyle: check compliance with docstring conventions
  "E", # pycodestyle errors: check for PEP 8 style convention errors
  "F", # pyflakes: check for Python source file errors
  # "FA", # flake8-future-annotations: enforce usage of future annotations when relevant
  "I", # isort: enforce import sorting
  "ICN", # flake8-import-conventions: enforce general import conventions
  "ISC", # flake8-implicit-str-concat: check for invalid implicit or explicit string concatenation
  "N", # pep8-naming: check for naming convention violations
  "PERF", # perflint: check for performance anti-patterns
  # "PT", # flake8-pytest-style: check common style issues and inconsistencies in pytest-based tests
  "PTH", # flake8-use-pathlib: enforce usage of pathlib for path manipulations instead of os.path
  "Q", # flake8-quotes: enforce consistent string quote usage
  "RET", # flake8-return: enforce best practices for return statements
  "RSE", # flake8-raise: enforce best practices for raise statements
  "RUF", # ruff: enforce ruff specific rules
  "S", # flake8-bandit: check for security issues
  "SLF", # flake8-self: prevent accessing private class member
  "TC", # flake8-type-checking: enforce best practices for type checking imports
  "TD", # flake8-todos: check issues on TODO comment syntax
  "UP", # pyupgrade: upgrade syntax for newer versions of Python
  "W", # pycodestyle warnings: check for PEP 8 style convention warnings
]

[tool.ruff.lint.extend-per-file-ignores]
"examples/*.py" = ["D"]
"src/linkup/__init__.py" = ["D104"]
"tests/**/*test.py" = ["D", "S101"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.wheel]
packages = ["src/linkup"] # Because project and source code directory names differ

[tool.semantic_release]
allow_zero_version = true
build_command = """
    python -m pip install -e '.[build]'
    uv lock --upgrade-package "$PACKAGE_NAME"
    git add uv.lock
    uv build
"""
commit_message = "chore: release v{version}\n\nAutomatically generated by python-semantic-release\n\n[skip ci]" # [skip ci] is needed to recursively calling the release CI
major_on_zero = false
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.commit_parser_options]
parse_squash_commits = false

[tool.uv]
required-version = ">=0.8.0,<0.9.0"
